{"mappings":"ACqJA,SAAS,gBAAgB,CAAC,mBArJ1B,WACE,IAAM,EAAK,SAAS,aAAa,CAAC,+BAElC,GAAI,CAAC,EACH,OAGF,IAAM,EAAO,EAAG,gBAAgB,CAAC,oBAC3B,EAAU,EAAG,gBAAgB,CAAC,wBAC9B,EAAO,EAAG,gBAAgB,CAAC,oBAsHjC,SAAS,EAAc,CAAG,EACxB,QAAQ,GAAG,CAAC,iBACZ,EAAK,OAAO,CAAC,AAAC,IACZ,EAAE,SAAS,CAAC,MAAM,CAAC,YACrB,GACA,EAAI,SAAS,CAAC,GAAG,CAAC,aAElB,IAAM,EAAO,SAAS,aAAa,CAAC,yBAC9B,EAAQ,KAAK,QAAQ,CAAC,GAG5B,EAAI,WAAW,CAAC,GAEhB,KAAK,IAAI,CAAC,EAAO,CACf,SAAU,GACV,KAAM,UAER,EACF,CAtIoB,IAAhB,EAAK,MAAM,EAAU,AAAmB,IAAnB,EAAQ,MAAM,EAAU,AAAgB,IAAhB,EAAK,MAAM,EAK5D,EAAK,OAAO,CAAC,CAAC,EAAK,KACjB,IAAM,EAAK,EAAI,OAAO,CAAC,QAAQ,CACzB,EAAU,SAAS,aAAa,CAAC,CAAC,qBAAqB,EAAE,EAAG,EAAE,CAAC,EAC/D,EAAU,EAAG,aAAa,CAAC,CAAC,qBAAqB,EAAE,EAAG,EAAE,CAAC,EACzD,EAAM,EAAG,aAAa,CAAC,CAAC,iBAAiB,EAAE,EAAG,EAAE,CAAC,EACjD,EAAQ,EAAI,aAAa,CAAC,OAE3B,GAAY,GAAY,IAIzB,EAAI,IACN,KAAK,GAAG,CAAC,EAAK,CAAE,SAAU,YAAa,GACvC,KAAK,GAAG,CAAC,EAAS,CAAE,SAAU,GAAI,QAAS,CAAE,GAC7C,KAAK,GAAG,CAAC,EAAO,CAAE,MAAO,GAAI,IAGpB,KAAK,QAAQ,CAAC,CACvB,cAAe,CACb,QAAS,EACT,MAAO,aACP,IAAK,gBACL,QAAS,CAAA,EACT,MAAO,EACP,GAAI,CAAC,IAAI,EAAE,EAAA,CAAG,CACd,QAAS,KACG,IAAN,IAGJ,EAAc,GAGd,KAAK,EAAE,CAAC,EAAK,CACX,SAAU,YACV,SAAU,EACV,KAAM,UACR,GAEA,KAAK,EAAE,CAAC,EAAO,CAAE,MAAO,EAAG,SAAU,EAAG,KAAM,UAAW,GAGzD,KAAK,EAAE,CAAC,EAAS,CACf,SAAU,EACV,QAAS,EACT,SAAU,EACV,KAAM,UACR,GACF,EACA,YAAa,KAKX,EAAc,GAGd,KAAK,EAAE,CAAC,EAAK,CACX,SAAU,YACV,SAAU,EACV,KAAM,UACR,GAEA,KAAK,EAAE,CAAC,EAAO,CAAE,MAAO,EAAG,SAAU,EAAG,KAAM,UAAW,GAGzD,KAAK,EAAE,CAAC,EAAS,CACf,SAAU,EACV,QAAS,EACT,SAAU,EACV,KAAM,UACR,EACF,EACA,QAAS,KACH,IAAM,EAAK,MAAM,CAAG,IAIxB,KAAK,EAAE,CAAC,EAAO,CAAE,MAAO,IAAK,SAAU,EAAG,KAAM,UAAW,GAG3D,KAAK,EAAE,CAAC,EAAS,CACf,SAAU,IACV,QAAS,EACT,SAAU,EACV,KAAM,UACR,GACF,EACA,YAAa,KACD,IAAN,IAKJ,KAAK,EAAE,CAAC,EAAK,CACX,SAAU,aACV,SAAU,EACV,KAAM,UACR,GAGA,KAAK,EAAE,CAAC,EAAS,CACf,SAAU,GACV,QAAS,EACT,SAAU,EACV,KAAM,UACR,GACF,CACF,CACF,GACF,EAsBF","sources":["<anon>","src/focusAreas.js"],"sourcesContent":["(() => {\nfunction $ba8b6ce19e63a11b$var$initFocusAreas() {\n    const el = document.querySelector(\"[data-focus-area-component]\");\n    if (!el) return;\n    const tabs = el.querySelectorAll(\"[data-focus-tab]\");\n    const content = el.querySelectorAll(\"[data-focus-content]\");\n    const imgs = el.querySelectorAll(\"[data-focus-img]\");\n    if (tabs.length === 0 || content.length === 0 || imgs.length === 0) return;\n    // set scrollTrigger for each tab\n    tabs.forEach((tab, i)=>{\n        const id = tab.dataset.focusTab;\n        const trigger = document.querySelector(`[data-focus-trigger=\"${id}\"]`);\n        const content = el.querySelector(`[data-focus-content=\"${id}\"]`);\n        const img = el.querySelector(`[data-focus-img=\"${id}\"]`);\n        const imgEl = img.querySelector('img');\n        if (!trigger || !content || !img) return;\n        if (i > 0) {\n            gsap.set(img, {\n                clipPath: `inset(50%)`\n            });\n            gsap.set(content, {\n                yPercent: 20,\n                opacity: 0\n            });\n            gsap.set(imgEl, {\n                scale: 1.1\n            });\n        }\n        const tl = gsap.timeline({\n            scrollTrigger: {\n                trigger: trigger,\n                start: \"top bottom\",\n                end: \"bottom bottom\",\n                markers: false,\n                scrub: 1,\n                id: `tab-${i}`,\n                onEnter: ()=>{\n                    if (i === 0) return;\n                    updateTabLine(tab);\n                    // animate img using GSAP and inset clip path\n                    gsap.to(img, {\n                        clipPath: `inset(0%)`,\n                        duration: 1,\n                        ease: \"expo.out\"\n                    });\n                    gsap.to(imgEl, {\n                        scale: 1,\n                        duration: 1,\n                        ease: \"expo.out\"\n                    });\n                    // animate content using GSAP\n                    gsap.to(content, {\n                        yPercent: 0,\n                        opacity: 1,\n                        duration: 1,\n                        ease: \"expo.out\"\n                    });\n                },\n                onEnterBack: ()=>{\n                    // if (i === tabs.length - 1) {\n                    //   return;\n                    // }\n                    updateTabLine(tab);\n                    // animate img using GSAP and inset clip path\n                    gsap.to(img, {\n                        clipPath: `inset(0%)`,\n                        duration: 1,\n                        ease: \"expo.out\"\n                    });\n                    gsap.to(imgEl, {\n                        scale: 1,\n                        duration: 1,\n                        ease: \"expo.out\"\n                    });\n                    // animate content using GSAP\n                    gsap.to(content, {\n                        yPercent: 0,\n                        opacity: 1,\n                        duration: 1,\n                        ease: \"expo.out\"\n                    });\n                },\n                onLeave: ()=>{\n                    if (i === tabs.length - 1) return;\n                    gsap.to(imgEl, {\n                        scale: 1.1,\n                        duration: 1,\n                        ease: \"expo.out\"\n                    });\n                    // animate content out using GSAP\n                    gsap.to(content, {\n                        yPercent: -20,\n                        opacity: 0,\n                        duration: 1,\n                        ease: \"expo.out\"\n                    });\n                },\n                onLeaveBack: ()=>{\n                    if (i === 0) return;\n                    // animate img using GSAP and inset clip path\n                    gsap.to(img, {\n                        clipPath: `inset(50%)`,\n                        duration: 1,\n                        ease: \"expo.out\"\n                    });\n                    // animate content using GSAP\n                    gsap.to(content, {\n                        yPercent: 20,\n                        opacity: 0,\n                        duration: 1,\n                        ease: \"expo.out\"\n                    });\n                }\n            }\n        });\n    });\n    function updateTabLine(tab) {\n        console.log(\"updateTabLine\");\n        tabs.forEach((t)=>{\n            t.classList.remove(\"is-active\");\n        });\n        tab.classList.add(\"is-active\");\n        // use GSAP Flip plugin to move the .focus-areas_tab-line element from the previously active tab to the active tab\n        const line = document.querySelector(\".focus-areas_tab-line\");\n        const state = Flip.getState(line);\n        // const activeTab = document.querySelector(\".focus-areas_tab.is-active\");\n        // append the line to the active tab\n        tab.appendChild(line);\n        Flip.from(state, {\n            duration: .5,\n            ease: \"expo.out\"\n        });\n    }\n}\ndocument.addEventListener(\"DOMContentLoaded\", $ba8b6ce19e63a11b$var$initFocusAreas);\n\n})();\n//# sourceMappingURL=focusAreas.js.map\n","function initFocusAreas() {\n  const el = document.querySelector(\"[data-focus-area-component]\");\n\n  if (!el) {\n    return;\n  }\n\n  const tabs = el.querySelectorAll(\"[data-focus-tab]\");\n  const content = el.querySelectorAll(\"[data-focus-content]\");\n  const imgs = el.querySelectorAll(\"[data-focus-img]\");\n\n  if (tabs.length === 0 || content.length === 0 || imgs.length === 0) {\n    return;\n  }\n\n  // set scrollTrigger for each tab\n  tabs.forEach((tab, i) => {\n    const id = tab.dataset.focusTab;\n    const trigger = document.querySelector(`[data-focus-trigger=\"${id}\"]`);\n    const content = el.querySelector(`[data-focus-content=\"${id}\"]`);\n    const img = el.querySelector(`[data-focus-img=\"${id}\"]`);\n    const imgEl = img.querySelector('img');\n\n    if (!trigger || !content || !img) {\n      return;\n    }\n\n    if (i > 0) {\n      gsap.set(img, { clipPath: `inset(50%)` });\n      gsap.set(content, { yPercent: 20, opacity: 0 });\n      gsap.set(imgEl, { scale: 1.1 });\n    }\n\n    const tl = gsap.timeline({\n      scrollTrigger: {\n        trigger: trigger,\n        start: \"top bottom\",\n        end: \"bottom bottom\",\n        markers: false,\n        scrub: 1,\n        id: `tab-${i}`,\n        onEnter: () => {\n          if (i === 0) {\n            return;\n          }\n          updateTabLine(tab);\n\n          // animate img using GSAP and inset clip path\n          gsap.to(img, {\n            clipPath: `inset(0%)`,\n            duration: 1,\n            ease: \"expo.out\",\n          });\n\n          gsap.to(imgEl, { scale: 1, duration: 1, ease: \"expo.out\" });\n\n          // animate content using GSAP\n          gsap.to(content, {\n            yPercent: 0,\n            opacity: 1,\n            duration: 1,\n            ease: \"expo.out\",\n          });\n        },\n        onEnterBack: () => {\n          // if (i === tabs.length - 1) {\n          //   return;\n          // }\n\n          updateTabLine(tab);\n\n          // animate img using GSAP and inset clip path\n          gsap.to(img, {\n            clipPath: `inset(0%)`,\n            duration: 1,\n            ease: \"expo.out\",\n          });\n\n          gsap.to(imgEl, { scale: 1, duration: 1, ease: \"expo.out\" });\n\n          // animate content using GSAP\n          gsap.to(content, {\n            yPercent: 0,\n            opacity: 1,\n            duration: 1,\n            ease: \"expo.out\",\n          });\n        },\n        onLeave: () => {\n          if (i === tabs.length - 1) {\n            return;\n          }\n\n          gsap.to(imgEl, { scale: 1.1, duration: 1, ease: \"expo.out\" });\n\n          // animate content out using GSAP\n          gsap.to(content, {\n            yPercent: -20,\n            opacity: 0,\n            duration: 1,\n            ease: \"expo.out\",\n          });\n        },\n        onLeaveBack: () => {\n          if (i === 0) {\n            return;\n          }\n\n          // animate img using GSAP and inset clip path\n          gsap.to(img, {\n            clipPath: `inset(50%)`,\n            duration: 1,\n            ease: \"expo.out\",\n          });\n\n          // animate content using GSAP\n          gsap.to(content, {\n            yPercent: 20,\n            opacity: 0,\n            duration: 1,\n            ease: \"expo.out\",\n          });\n        },\n      },\n    });\n  });\n\n  function updateTabLine(tab) {\n    console.log(\"updateTabLine\");\n    tabs.forEach((t) => {\n      t.classList.remove(\"is-active\");\n    });\n    tab.classList.add(\"is-active\");\n    // use GSAP Flip plugin to move the .focus-areas_tab-line element from the previously active tab to the active tab\n    const line = document.querySelector(\".focus-areas_tab-line\");\n    const state = Flip.getState(line);\n    // const activeTab = document.querySelector(\".focus-areas_tab.is-active\");\n    // append the line to the active tab\n    tab.appendChild(line);\n\n    Flip.from(state, {\n      duration: .5,\n      ease: \"expo.out\",\n      // absolute: true,\n    });\n  }\n\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", initFocusAreas);"],"names":["document","addEventListener","el","querySelector","tabs","querySelectorAll","content","imgs","updateTabLine","tab","console","log","forEach","t","classList","remove","add","line","state","Flip","getState","appendChild","from","duration","ease","length","i","id","dataset","focusTab","trigger","img","imgEl","gsap","set","clipPath","yPercent","opacity","scale","timeline","scrollTrigger","start","end","markers","scrub","onEnter","to","onEnterBack","onLeave","onLeaveBack"],"version":3,"file":"focusAreas.js.map"}