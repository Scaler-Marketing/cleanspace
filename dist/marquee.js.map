{"mappings":"ACiHA,SAAS,gBAAgB,CAAC,mBAAoB,KAhH5C,SACG,gBAAgB,CAAC,0CACjB,OAAO,CAAC,AAAC,IAER,IAAM,EAAiB,EAAQ,aAAa,CAC1C,oCAEI,EAAgB,EAAQ,aAAa,CACzC,gCAEF,GAAI,CAAC,GAAkB,CAAC,EAAe,OAGvC,GAAM,CACJ,aAAc,CAAK,CACnB,iBAAkB,CAAS,CAC3B,iBAAkB,CAAS,CAC3B,mBAAoB,CAAW,CAChC,CAAG,EAAQ,OAAO,CAGb,EAAmB,WAAW,GAC9B,EAAuB,AAAc,UAAd,EAAwB,EAAI,GACnD,EAAkB,SAAS,GAAa,GACxC,EAAkB,WAAW,GAC7B,EACJ,OAAO,UAAU,CAAG,IAAM,IAAO,OAAO,UAAU,CAAG,IAAM,GAAM,EAE/D,EACF,EACC,CAAA,EAAe,WAAW,CAAG,OAAO,UAAU,AAAV,EACrC,EAOF,GAJA,EAAc,KAAK,CAAC,UAAU,CAAG,CAAA,EAAG,AAAkB,GAAlB,EAAqB,CAAC,CAAC,CAC3D,EAAc,KAAK,CAAC,KAAK,CAAG,CAAA,EAAG,AAAkB,EAAlB,EAAsB,IAAI,CAAC,CAAC,CAGvD,EAAkB,EAAG,CACvB,IAAM,EAAW,SAAS,sBAAsB,GAChD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAiB,IACnC,EAAS,WAAW,CAAC,EAAe,SAAS,CAAC,CAAA,IAEhD,EAAc,WAAW,CAAC,EAC5B,CAGA,IAAM,EAAe,EAAQ,gBAAgB,CAC3C,oCAEI,EAAY,KACf,EAAE,CAAC,EAAc,CAChB,SAAU,KACV,OAAQ,GACR,SAAU,EACV,KAAM,QACR,GACC,aAAa,CAAC,IAGjB,KAAK,GAAG,CAAC,EAAc,CACrB,SAAU,AAAyB,IAAzB,EAA6B,IAAM,IAC/C,GACA,EAAU,SAAS,CAAC,GACpB,EAAU,IAAI,GAGd,EAAQ,YAAY,CAAC,sBAAuB,UAG5C,cAAc,MAAM,CAAC,CACnB,QAAS,EACT,MAAO,aACP,IAAK,aACL,SAAU,AAAC,IACT,IAAM,EAAa,AAAmB,IAAnB,EAAK,SAAS,CAMjC,EAAU,SAAS,CALM,EACrB,CAAC,EACD,GAIJ,EAAQ,YAAY,CAClB,sBACA,EAAa,SAAW,WAE5B,CACF,GAGA,IAAM,EAAK,KAAK,QAAQ,CAAC,CACvB,cAAe,CACb,QAAS,EACT,MAAO,UACP,IAAK,UACL,MAAO,CACT,CACF,GAEM,EACJ,AAAyB,KAAzB,EAA8B,EAAkB,CAAC,EAGnD,EAAG,MAAM,CACP,EACA,CAAE,EAAG,CAAA,EAAG,EAAY,EAAE,CAAC,AAAC,EACxB,CAAE,EAAG,CAAA,EALW,CAAC,EAKC,EAAE,CAAC,CAAE,KAAM,MAAO,EAExC,EAMJ","sources":["<anon>","src/marquee.js"],"sourcesContent":["(() => {\nfunction $cd63440b1507af0d$var$initMarqueeScrollDirection() {\n    document.querySelectorAll(\"[data-marquee-scroll-direction-target]\").forEach((marquee)=>{\n        // Query marquee elements\n        const marqueeContent = marquee.querySelector(\"[data-marquee-collection-target]\");\n        const marqueeScroll = marquee.querySelector(\"[data-marquee-scroll-target]\");\n        if (!marqueeContent || !marqueeScroll) return;\n        // Get data attributes\n        const { marqueeSpeed: speed, marqueeDirection: direction, marqueeDuplicate: duplicate, marqueeScrollSpeed: scrollSpeed } = marquee.dataset;\n        // Convert data attributes to usable types\n        const marqueeSpeedAttr = parseFloat(speed);\n        const marqueeDirectionAttr = direction === \"right\" ? 1 : -1; // 1 for right, -1 for left\n        const duplicateAmount = parseInt(duplicate || 0);\n        const scrollSpeedAttr = parseFloat(scrollSpeed);\n        const speedMultiplier = window.innerWidth < 479 ? 0.25 : window.innerWidth < 991 ? 0.5 : 1;\n        let marqueeSpeed = marqueeSpeedAttr * (marqueeContent.offsetWidth / window.innerWidth) * speedMultiplier;\n        // Precompute styles for the scroll container\n        marqueeScroll.style.marginLeft = `${scrollSpeedAttr * -1}%`;\n        marqueeScroll.style.width = `${scrollSpeedAttr * 2 + 100}%`;\n        // Duplicate marquee content\n        if (duplicateAmount > 0) {\n            const fragment = document.createDocumentFragment();\n            for(let i = 0; i < duplicateAmount; i++)fragment.appendChild(marqueeContent.cloneNode(true));\n            marqueeScroll.appendChild(fragment);\n        }\n        // GSAP animation for marquee content\n        const marqueeItems = marquee.querySelectorAll(\"[data-marquee-collection-target]\");\n        const animation = gsap.to(marqueeItems, {\n            xPercent: -100,\n            repeat: -1,\n            duration: marqueeSpeed,\n            ease: \"linear\"\n        }).totalProgress(0.5);\n        // Initialize marquee in the correct direction\n        gsap.set(marqueeItems, {\n            xPercent: marqueeDirectionAttr === 1 ? 100 : -100\n        });\n        animation.timeScale(marqueeDirectionAttr); // Set correct direction\n        animation.play(); // Start animation immediately\n        // Set initial marquee status\n        marquee.setAttribute(\"data-marquee-status\", \"normal\");\n        // ScrollTrigger logic for direction inversion\n        ScrollTrigger.create({\n            trigger: marquee,\n            start: \"top bottom\",\n            end: \"bottom top\",\n            onUpdate: (self)=>{\n                const isInverted = self.direction === 1; // Scrolling down\n                const currentDirection = isInverted ? -marqueeDirectionAttr : marqueeDirectionAttr;\n                // Update animation direction and marquee status\n                animation.timeScale(currentDirection);\n                marquee.setAttribute(\"data-marquee-status\", isInverted ? \"normal\" : \"inverted\");\n            }\n        });\n        // Extra speed effect on scroll\n        const tl = gsap.timeline({\n            scrollTrigger: {\n                trigger: marquee,\n                start: \"0% 100%\",\n                end: \"100% 0%\",\n                scrub: 0\n            }\n        });\n        const scrollStart = marqueeDirectionAttr === -1 ? scrollSpeedAttr : -scrollSpeedAttr;\n        const scrollEnd = -scrollStart;\n        tl.fromTo(marqueeScroll, {\n            x: `${scrollStart}vw`\n        }, {\n            x: `${scrollEnd}vw`,\n            ease: \"none\"\n        });\n    });\n}\n// Initialize Marquee with Scroll Direction\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    $cd63440b1507af0d$var$initMarqueeScrollDirection();\n});\n\n})();\n//# sourceMappingURL=marquee.js.map\n","function initMarqueeScrollDirection() {\n  document\n    .querySelectorAll(\"[data-marquee-scroll-direction-target]\")\n    .forEach((marquee) => {\n      // Query marquee elements\n      const marqueeContent = marquee.querySelector(\n        \"[data-marquee-collection-target]\"\n      );\n      const marqueeScroll = marquee.querySelector(\n        \"[data-marquee-scroll-target]\"\n      );\n      if (!marqueeContent || !marqueeScroll) return;\n\n      // Get data attributes\n      const {\n        marqueeSpeed: speed,\n        marqueeDirection: direction,\n        marqueeDuplicate: duplicate,\n        marqueeScrollSpeed: scrollSpeed,\n      } = marquee.dataset;\n\n      // Convert data attributes to usable types\n      const marqueeSpeedAttr = parseFloat(speed);\n      const marqueeDirectionAttr = direction === \"right\" ? 1 : -1; // 1 for right, -1 for left\n      const duplicateAmount = parseInt(duplicate || 0);\n      const scrollSpeedAttr = parseFloat(scrollSpeed);\n      const speedMultiplier =\n        window.innerWidth < 479 ? 0.25 : window.innerWidth < 991 ? 0.5 : 1;\n\n      let marqueeSpeed =\n        marqueeSpeedAttr *\n        (marqueeContent.offsetWidth / window.innerWidth) *\n        speedMultiplier;\n\n      // Precompute styles for the scroll container\n      marqueeScroll.style.marginLeft = `${scrollSpeedAttr * -1}%`;\n      marqueeScroll.style.width = `${scrollSpeedAttr * 2 + 100}%`;\n\n      // Duplicate marquee content\n      if (duplicateAmount > 0) {\n        const fragment = document.createDocumentFragment();\n        for (let i = 0; i < duplicateAmount; i++) {\n          fragment.appendChild(marqueeContent.cloneNode(true));\n        }\n        marqueeScroll.appendChild(fragment);\n      }\n\n      // GSAP animation for marquee content\n      const marqueeItems = marquee.querySelectorAll(\n        \"[data-marquee-collection-target]\"\n      );\n      const animation = gsap\n        .to(marqueeItems, {\n          xPercent: -100, // Move completely out of view\n          repeat: -1,\n          duration: marqueeSpeed,\n          ease: \"linear\",\n        })\n        .totalProgress(0.5);\n\n      // Initialize marquee in the correct direction\n      gsap.set(marqueeItems, {\n        xPercent: marqueeDirectionAttr === 1 ? 100 : -100,\n      });\n      animation.timeScale(marqueeDirectionAttr); // Set correct direction\n      animation.play(); // Start animation immediately\n\n      // Set initial marquee status\n      marquee.setAttribute(\"data-marquee-status\", \"normal\");\n\n      // ScrollTrigger logic for direction inversion\n      ScrollTrigger.create({\n        trigger: marquee,\n        start: \"top bottom\",\n        end: \"bottom top\",\n        onUpdate: (self) => {\n          const isInverted = self.direction === 1; // Scrolling down\n          const currentDirection = isInverted\n            ? -marqueeDirectionAttr\n            : marqueeDirectionAttr;\n\n          // Update animation direction and marquee status\n          animation.timeScale(currentDirection);\n          marquee.setAttribute(\n            \"data-marquee-status\",\n            isInverted ? \"normal\" : \"inverted\"\n          );\n        },\n      });\n\n      // Extra speed effect on scroll\n      const tl = gsap.timeline({\n        scrollTrigger: {\n          trigger: marquee,\n          start: \"0% 100%\",\n          end: \"100% 0%\",\n          scrub: 0,\n        },\n      });\n\n      const scrollStart =\n        marqueeDirectionAttr === -1 ? scrollSpeedAttr : -scrollSpeedAttr;\n      const scrollEnd = -scrollStart;\n\n      tl.fromTo(\n        marqueeScroll,\n        { x: `${scrollStart}vw` },\n        { x: `${scrollEnd}vw`, ease: \"none\" }\n      );\n    });\n}\n\n// Initialize Marquee with Scroll Direction\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  initMarqueeScrollDirection();\n});\n"],"names":["document","addEventListener","querySelectorAll","forEach","marquee","marqueeContent","querySelector","marqueeScroll","marqueeSpeed","speed","marqueeDirection","direction","marqueeDuplicate","duplicate","marqueeScrollSpeed","scrollSpeed","dataset","marqueeSpeedAttr","parseFloat","marqueeDirectionAttr","duplicateAmount","parseInt","scrollSpeedAttr","speedMultiplier","window","innerWidth","offsetWidth","style","marginLeft","width","fragment","createDocumentFragment","i","appendChild","cloneNode","marqueeItems","animation","gsap","to","xPercent","repeat","duration","ease","totalProgress","set","timeScale","play","setAttribute","ScrollTrigger","create","trigger","start","end","onUpdate","self","isInverted","tl","timeline","scrollTrigger","scrub","scrollStart","fromTo","x"],"version":3,"file":"marquee.js.map"}