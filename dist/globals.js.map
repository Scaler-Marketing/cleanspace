{"mappings":"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","sources":["<anon>","src/globals.js","src/modules/setLoadingStates.js","src/modules/buttons.js","src/modules/menu.js","src/modules/staggerText.js","src/modules/setLinesWrapper.js","src/modules/staggerElements.js","src/modules/SVGPathAnimation.js","src/modules/checkNavTheme.js","src/modules/formSubmit.js","src/modules/contactForm.js"],"sourcesContent":["(() => {\nfunction $ce6a18b12420bce7$export$7fd17f34fe72f4b0() {\n    const loading = document.querySelector(\".loading\");\n    if (!loading) return;\n    const logo = loading.querySelector(\".loading_logo\");\n    const logoPath = loading.querySelector(\".loading_bg-svg path\");\n    gsap.set(logoPath, {\n        drawSVG: \"100% live\"\n    });\n    gsap.set(logo, {\n        opacity: 1,\n        y: \"0%\"\n    });\n    gsap.set(loading, {\n        clipPath: \"inset(0% 0% 0% 0%)\"\n    });\n    gsap.to(logoPath, {\n        drawSVG: \"0% live\",\n        duration: 2,\n        delay: 0.5\n    });\n    gsap.to(logo, {\n        opacity: 0,\n        y: \"-50%\",\n        delay: 0.5,\n        duration: 1,\n        ease: \"expo.out\"\n    });\n    gsap.to(loading, {\n        clipPath: \"inset(0% 0% 100% 0%)\",\n        duration: 1,\n        delay: 1,\n        ease: \"expo.out\",\n        onComplete: ()=>{\n            loading.style.display = \"none\";\n            gsap.set(logo, {\n                opacity: 0,\n                y: \"50%\"\n            });\n            gsap.set(loading, {\n                clipPath: \"inset(100% 0% 0% 0%)\"\n            });\n        }\n    });\n    // Loading animation\n    const links = document.querySelectorAll(\"a\");\n    links.forEach((l)=>{\n        l.addEventListener(\"click\", (e)=>{\n            // e.preventDefault();\n            const href = l.href;\n            const url = new URL(href);\n            if (window.location.origin === url.origin && window.location.pathname !== url.pathname && l.target !== \"_blank\") {\n                e.preventDefault();\n                loading.style.display = \"flex\";\n                gsap.to(logo, {\n                    opacity: 1,\n                    y: \"0%\",\n                    duration: 1,\n                    delay: 0.5,\n                    ease: \"expo.out\"\n                });\n                gsap.to(logoPath, {\n                    drawSVG: \"100% live\",\n                    duration: 2,\n                    delay: 0.5\n                });\n                gsap.to(loading, {\n                    clipPath: \"inset(0% 0% 0% 0%)\",\n                    duration: 1,\n                    ease: \"expo.out\",\n                    onComplete: ()=>{\n                        window.location.href = href;\n                    }\n                });\n            // setTimeout(() => {\n            //   window.location.href = href;\n            // }, 500);\n            }\n        });\n    });\n}\n\n\nfunction $8dde7174b81b4982$export$1744cb1794fd120a() {\n    // Register the Finsweet CMS load callback using the official API.\n    window.fsAttributes = window.fsAttributes || [];\n    window.fsAttributes.push([\n        \"cmsload\",\n        (listInstances)=>{\n            console.log(\"cmsload Successfully loaded!\");\n            // Loop through all CMSList instances on the page.\n            listInstances.forEach((listInstance)=>{\n                // Listen for the 'renderitems' event.\n                listInstance.on(\"renderitems\", (renderedItems)=>{\n                    $8dde7174b81b4982$var$setButtons();\n                });\n            });\n        }\n    ]);\n    // Run the initial setup for buttons.\n    $8dde7174b81b4982$var$setButtons();\n}\nfunction $8dde7174b81b4982$var$setButtons() {\n    // Only select buttons that haven’t been initialized yet.\n    const buttons = document.querySelectorAll(\".button:not([data-initialized])\");\n    if (!buttons.length) {\n        console.error(\"No new buttons found.\");\n        return;\n    }\n    // Initialize each new button.\n    buttons.forEach((button)=>{\n        button.setAttribute(\"data-initialized\", \"true\");\n        $8dde7174b81b4982$var$setButton(button);\n    });\n}\nfunction $8dde7174b81b4982$var$setButton(button) {\n    // Split the button text into spans for lines and words using SplitType.\n    const buttonEls = new SplitType(button.querySelector(\".button_label\"), {\n        types: \"lines, words\",\n        tagName: \"span\"\n    });\n    const bg = button.querySelector(\".button_bg\");\n    const icon = button.querySelectorAll(\".button_icon-el\");\n    // Stagger words on mouse enter.\n    button.addEventListener(\"mouseenter\", ()=>{\n        gsap.to(buttonEls.words, {\n            yPercent: -100,\n            stagger: 0.01,\n            duration: 0.5,\n            ease: \"expo.out\"\n        });\n        gsap.to(bg, {\n            scaleX: 1,\n            duration: 0.5,\n            ease: \"expo.out\"\n        });\n        if (icon[0].classList.contains(\"move-horizontal\")) gsap.to(icon, {\n            xPercent: 100,\n            duration: 0.5,\n            ease: \"expo.out\"\n        });\n        else if (icon[0].classList.contains(\"move-vertical\")) gsap.to(icon, {\n            yPercent: 100,\n            duration: 0.5,\n            ease: \"expo.out\"\n        });\n    });\n    // Revert animations on mouse leave.\n    button.addEventListener(\"mouseleave\", ()=>{\n        gsap.to(buttonEls.words, {\n            yPercent: 0,\n            stagger: 0.02,\n            duration: 0.5,\n            ease: \"expo.out\"\n        });\n        gsap.to(bg, {\n            scaleX: 0,\n            duration: 0.3,\n            ease: \"expo.out\"\n        });\n        if (icon[0].classList.contains(\"move-horizontal\")) gsap.to(icon, {\n            xPercent: 0,\n            duration: 0.3,\n            ease: \"expo.out\"\n        });\n        else if (icon[0].classList.contains(\"move-vertical\")) gsap.to(icon, {\n            yPercent: 0,\n            duration: 0.3,\n            ease: \"expo.out\"\n        });\n    });\n}\n\n\nfunction $ee20a49b40292314$export$22ea07d0c2ddb570() {\n    const menu = document.querySelector(\".navbar_component\");\n    if (!menu) {\n        console.error(\"No menu found.\");\n        return;\n    }\n    // use gsap.matchMedia to check if the screen is table or mobile.\n    // If it is, add extra logic to open the mobile menu on click and also the dropdowns on click.\n    // If it is not, use the mouseenter and mouseleave events to show and hide the dropdowns.\n    const mm = gsap.matchMedia();\n    mm.add({\n        isMobile: \"(max-width: 991px)\",\n        isDesktop: \"(min-width: 992px)\"\n    }, (context)=>{\n        const menuItems = menu.querySelectorAll(\".navbar_link\");\n        menuItems.forEach((item)=>$ee20a49b40292314$var$setMenuItem(item, context.conditions.isMobile));\n        const dropdowns = menu.querySelectorAll(\".navbar_dropdown-trigger\");\n        if (!dropdowns) {\n            console.error(\"No dropdowns found.\");\n            return;\n        }\n        if (context.conditions.isMobile) {\n            const menuTrigger = menu.querySelector(\".navbar_link.is-mobile-trigger\");\n            const menuDropdown = menu.querySelector(\".navbar_menu\");\n            const contentWrapper = document.querySelector(\".main-wrapper\");\n            const footer = document.querySelector(\".footer\");\n            gsap.set(menuDropdown, {\n                height: 0\n            });\n            menuTrigger.addEventListener(\"click\", ()=>{\n                menuDropdown.classList.toggle(\"is-active\");\n                if (menuDropdown.classList.contains(\"is-active\")) {\n                    gsap.to(menuDropdown, {\n                        height: \"auto\",\n                        duration: 0.5,\n                        ease: \"expo.out\"\n                    });\n                    gsap.to(menuTrigger.querySelectorAll(\".navbar_link-icon-svg\"), {\n                        rotate: 180,\n                        duration: 0.5,\n                        ease: \"expo.out\"\n                    });\n                    gsap.to(contentWrapper, {\n                        filter: \"blur(15px)\",\n                        duration: 0.5,\n                        ease: \"expo.out\"\n                    });\n                    gsap.to(footer, {\n                        filter: \"blur(15px)\",\n                        duration: 0.5,\n                        ease: \"expo.out\"\n                    });\n                } else {\n                    gsap.to(menuDropdown, {\n                        height: 0,\n                        duration: 0.5,\n                        ease: \"expo.out\"\n                    });\n                    gsap.to(menuTrigger.querySelectorAll(\".navbar_link-icon-svg\"), {\n                        rotate: 0,\n                        duration: 0.5,\n                        ease: \"expo.out\"\n                    });\n                    gsap.to(contentWrapper, {\n                        filter: \"blur(0px)\",\n                        duration: 0.5,\n                        ease: \"expo.out\"\n                    });\n                    gsap.to(footer, {\n                        filter: \"blur(0px)\",\n                        duration: 0.5,\n                        ease: \"expo.out\"\n                    });\n                }\n            });\n        }\n        dropdowns.forEach((dropdown)=>{\n            $ee20a49b40292314$var$setDropdown(dropdown, context.conditions.isMobile);\n        });\n    });\n}\nfunction $ee20a49b40292314$var$setMenuItem(item) {\n    const itemEls = new SplitType(item.querySelector(\".navbar_link-label\"), {\n        types: \"lines, words\",\n        tagName: \"span\"\n    });\n    item.addEventListener(\"mouseenter\", ()=>{\n        gsap.to(itemEls.words, {\n            yPercent: -100,\n            stagger: 0.05,\n            duration: 0.5,\n            ease: \"expo.out\"\n        });\n    });\n    item.addEventListener(\"mouseleave\", ()=>{\n        gsap.to(itemEls.words, {\n            yPercent: 0,\n            stagger: 0.05,\n            duration: 0.5,\n            ease: \"expo.out\"\n        });\n    });\n}\nfunction $ee20a49b40292314$var$setDropdown(dropdown, isMobile) {\n    // add mouse hover logic to show / hide dropdown based on .navbar_dropdown height\n    const dropdownMenu = dropdown.querySelector(\".navbar_dropdown\");\n    const dropdownLinks = dropdownMenu.querySelectorAll(\".dropdown_item\");\n    gsap.set(dropdownLinks, {\n        yPercent: 50,\n        opacity: 0\n    });\n    const tl = gsap.timeline();\n    const openDropdown = ()=>{\n        tl.clear();\n        tl.set(dropdownMenu, {\n            height: \"0\"\n        });\n        tl.set(dropdownLinks, {\n            yPercent: 50,\n            opacity: 0\n        });\n        tl.to(dropdownMenu, {\n            height: \"auto\",\n            duration: 0.5,\n            ease: \"expo.out\"\n        });\n        tl.to(dropdown.querySelectorAll(\".navbar_link-icon-svg\"), {\n            rotate: 180,\n            duration: 0.5,\n            ease: \"expo.out\"\n        }, 0);\n        tl.to(dropdownLinks, {\n            yPercent: 0,\n            opacity: 1,\n            stagger: 0.01,\n            duration: 0.5,\n            ease: \"expo.out\"\n        }, 0.25);\n    };\n    const closeDropdown = ()=>{\n        tl.clear();\n        tl.to(dropdownMenu, {\n            height: 0,\n            duration: 0.5,\n            ease: \"expo.out\"\n        });\n        tl.to(dropdownLinks, {\n            yPercent: 50,\n            opacity: 0,\n            duration: 0.3,\n            ease: \"expo.out\"\n        }, 0);\n        tl.to(dropdown.querySelectorAll(\".navbar_link-icon-svg\"), {\n            rotate: 0,\n            duration: 0.5,\n            ease: \"expo.out\"\n        }, 0);\n    };\n    if (isMobile) dropdown.addEventListener(\"click\", (e)=>{\n        e.preventDefault();\n        if (dropdown.classList.contains(\"active\")) {\n            closeDropdown();\n            dropdown.classList.remove(\"active\");\n        } else {\n            openDropdown();\n            dropdown.classList.add(\"active\");\n        }\n    });\n    else {\n        dropdown.addEventListener(\"mouseenter\", ()=>{\n            openDropdown();\n        });\n        dropdown.addEventListener(\"mouseleave\", ()=>{\n            closeDropdown();\n        });\n    }\n}\n\n\nfunction $1c7845f0e1de0887$export$8f060496e19d4bbb(lines, callback) {\n    // Wrap each line in a .line-wrapper span\n    lines.forEach((line)=>{\n        // add a space right after the last word to prevent the line from collapsing\n        const innerHTML = line.innerHTML;\n        // add space after the last word\n        const newInnerHTML = innerHTML.replace(/(\\w+)(\\s*)$/, '$1 $2');\n        line.innerHTML = newInnerHTML;\n    });\n    if (typeof callback === 'function') callback();\n}\n\n\n// Link timelines to scroll position\nfunction $1aa2e0393d0f1beb$var$createScrollTrigger(triggerElement, elements, start, end, stagger, delay, withScroll) {\n    const trigger = {\n        trigger: triggerElement,\n        scrub: true,\n        start: start,\n        fastScrollEnd: 500,\n        preventOverlaps: \"scroll-text\"\n    };\n    if (!withScroll) {\n        trigger.onEnter = ()=>{\n            gsap.to(elements, {\n                y: 0,\n                opacity: 1,\n                stagger: stagger,\n                duration: 1.5,\n                ease: \"power4.out\",\n                delay: Number(delay)\n            });\n        };\n        gsap.timeline({\n            scrollTrigger: trigger\n        });\n    } else {\n        trigger.end = end;\n        gsap.timeline({\n            scrollTrigger: trigger\n        }).to(words, {\n            y: 0,\n            opacity: 1.5,\n            stagger: stagger,\n            duration: 1,\n            ease: \"none\"\n        });\n    }\n}\nfunction $1aa2e0393d0f1beb$export$1601281ad392a6d8() {\n    // Split all words on the brand core section\n    const textEls = document.querySelectorAll('[stagger-text]');\n    textEls.forEach((el)=>{\n        const type = el.getAttribute(\"stagger-text\");\n        let staggerTextEls;\n        if (el.classList.contains('w-richtext')) staggerTextEls = new SplitType(el.querySelectorAll(\"p, li, h2, h3\"), {\n            types: type === \"words\" ? \"words\" : \"lines\",\n            tagName: \"span\"\n        });\n        else staggerTextEls = new SplitType(el, {\n            types: type === \"words\" ? \"words\" : \"lines\",\n            tagName: \"span\"\n        });\n        if (type !== \"words\") (0, $1c7845f0e1de0887$export$8f060496e19d4bbb)(staggerTextEls.lines);\n        gsap.set(type === \"words\" ? staggerTextEls.words : staggerTextEls.lines, {\n            y: \"1em\",\n            opacity: 0\n        });\n        el.classList.add(\"init\");\n        const words1 = type === \"words\" ? el.querySelectorAll(\".word\") : el.querySelectorAll(\".line\"), startVal = el.dataset.startPos || \"bottom bottom\", endVal = el.dataset.endPos || \"bottom center\", stagger = el.dataset.stagger || 0.05, delay = el.dataset.delay || 0, withScrollTrigger = el.dataset.withScroll || false;\n        $1aa2e0393d0f1beb$var$createScrollTrigger(el, words1, startVal, endVal, stagger, delay, withScrollTrigger);\n    });\n}\n\n\n// Link timelines to scroll position\nfunction $4013e65a83b1b778$var$createScrollList(triggerElement, elements, start, stagger, delay) {\n    gsap.set(elements, {\n        yPercent: 100,\n        opacity: 0\n    });\n    gsap.timeline({\n        scrollTrigger: {\n            trigger: triggerElement,\n            scrub: true,\n            start: start,\n            onEnter: ()=>{\n                gsap.to(elements, {\n                    yPercent: 0,\n                    opacity: 1,\n                    stagger: stagger,\n                    ease: \"power4.out\",\n                    delay: Number(delay)\n                });\n            }\n        }\n    });\n}\nfunction $4013e65a83b1b778$export$9b05384e3b3cbff1() {\n    const list = document.querySelectorAll(\"[stagger-list]\");\n    if (!list) return;\n    list.forEach((el)=>{\n        const elements = el.querySelectorAll(\"[stagger-el]\"), startVal = el.dataset.startPos || \"top bottom\", stagger = el.dataset.stagger || 0.05, delay = el.dataset.delay || 0;\n        if (!elements) return;\n        $4013e65a83b1b778$var$createScrollList(el, elements, startVal, stagger, delay);\n    });\n}\n\n\nfunction $2739916fb78fd945$export$e125e88f659d8ab1() {\n    const paths = document.querySelectorAll(\"[path-reveal]\");\n    if (!paths) {\n        console.error(\"No paths found.\");\n        return;\n    }\n    paths.forEach((path)=>{\n        $2739916fb78fd945$var$setPathAnimation(path);\n    });\n}\nfunction $2739916fb78fd945$var$setPathAnimation(path) {\n    // use GSAP drawSVG plugin to animate path drawing  \n    const pathEls = path.querySelectorAll(\"path\");\n    const duration = path.dataset.duration ? parseFloat(path.dataset.duration) : 3;\n    gsap.set(pathEls, {\n        drawSVG: \"0%\"\n    });\n    // Set ScrollTrigger to trigger animation when path is in view\n    ScrollTrigger.create({\n        trigger: path,\n        start: \"top center\",\n        onEnter: ()=>{\n            gsap.to(pathEls, {\n                drawSVG: \"100%\",\n                duration: duration,\n                ease: \"expo.out\"\n            });\n        }\n    });\n}\n\n\nfunction $0cbe32f8563a9a71$export$3e5ce0c0ac78a8da() {\n    // Get detection offset, in this case the navbar\n    const navBarHeight = document.querySelector(\"[data-nav-bar-height]\");\n    const themeObserverOffset = navBarHeight ? navBarHeight.offsetHeight / 2 : 0;\n    function checkThemeSection() {\n        const themeSections = document.querySelectorAll(\"[data-theme-section]\");\n        themeSections.forEach(function(themeSection) {\n            const rect = themeSection.getBoundingClientRect();\n            const themeSectionTop = rect.top;\n            const themeSectionBottom = rect.bottom;\n            // If the offset is between the top & bottom of the current section\n            if (themeSectionTop <= themeObserverOffset && themeSectionBottom >= themeObserverOffset) {\n                // Check [data-theme-section]\n                const themeSectionActive = themeSection.getAttribute(\"data-theme-section\");\n                document.querySelectorAll(\"[data-theme-nav]\").forEach(function(elem) {\n                    if (elem.getAttribute(\"data-theme-nav\") !== themeSectionActive) elem.setAttribute(\"data-theme-nav\", themeSectionActive);\n                });\n                // Check [data-bg-section]\n                const bgSectionActive = themeSection.getAttribute(\"data-bg-section\");\n                document.querySelectorAll(\"[data-bg-nav]\").forEach(function(elem) {\n                    if (elem.getAttribute(\"data-bg-nav\") !== bgSectionActive) elem.setAttribute(\"data-bg-nav\", bgSectionActive);\n                });\n            }\n        });\n    }\n    function startThemeCheck() {\n        document.addEventListener(\"scroll\", checkThemeSection);\n    }\n    // Initial check and start listening for scroll\n    checkThemeSection();\n    startThemeCheck();\n}\n\n\nfunction $b140b9eb34f1ac44$export$4bc49541bd3cd0fc() {\n    const forms = document.querySelectorAll(\"form\");\n    if (!forms) return;\n    forms.forEach((form)=>{\n        const formSubmitButton = form.querySelector(\".button.is-submit\");\n        const submitButton = form.querySelector(\".form_submit\");\n        const label = form.querySelector(\".button_label\");\n        if (!formSubmitButton || !submitButton) return;\n        // add event listener to the form submit button\n        formSubmitButton.addEventListener(\"click\", function(e) {\n            e.preventDefault(); // prevent the default action\n            // check if the form is valid\n            if (form.checkValidity()) {\n                // if valid, submit the form and change the button text\n                submitButton.click();\n                label.textContent = submitButton.getAttribute(\"data-wait\");\n            } else // if not valid, report validity (this will show the HTML5 validation messages)\n            form.reportValidity();\n        });\n    // form.addEventListener(\"submit\", function () {\n    //   // scroll screen back to the top of the using Lenis.js scrollTo method\n    //   const formTop = form.getBoundingClientRect().top;\n    //   lenis.scrollTo(formTop, 500);\n    // });\n    });\n}\n\n\nfunction $7d54ea0d6e840462$export$d5bd5b80f649d6c() {\n    const wrapper = document.querySelector(\".contact-modal\");\n    // const form = wrapper.querySelector(\"form\");\n    if (!wrapper) return;\n    const backdrop = wrapper.querySelector(\".contact-modal_backdrop\");\n    const body = wrapper.querySelector(\".contact-modal_body\");\n    const closeButton = wrapper.querySelector(\".contact-modal_close\");\n    gsap.set(wrapper, {\n        display: \"none\"\n    });\n    gsap.set(backdrop, {\n        autoAlpha: 0\n    });\n    gsap.set(body, {\n        clipPath: \"inset(50%)\"\n    });\n    gsap.set(closeButton, {\n        scale: 0\n    });\n    const tl = gsap.timeline({\n        paused: true\n    });\n    tl.set(wrapper, {\n        display: \"flex\"\n    });\n    tl.to(backdrop, {\n        autoAlpha: 1,\n        duration: 0.5,\n        ease: \"expo.inOut\"\n    });\n    tl.to(body, {\n        clipPath: \"inset(0%)\",\n        duration: 1,\n        ease: \"expo.inOut\"\n    }, 0.25);\n    tl.to(closeButton, {\n        scale: 1,\n        duration: 0.5,\n        ease: \"expo.inOut\"\n    }, 1);\n    const openButton = document.querySelectorAll(\"[data-contact-trigger]\");\n    openButton.forEach((button)=>{\n        button.addEventListener(\"click\", ()=>{\n            wrapper.classList.add(\"is-active\");\n            // document.body.classList.add(\"no-scrollbar\");\n            lenis.stop();\n            tl.play();\n        });\n    });\n    closeButton.addEventListener(\"click\", ()=>{\n        wrapper.classList.remove(\"is-active\");\n        // document.body.classList.remove(\"no-scrollbar\");\n        lenis.start();\n        tl.reverse();\n    });\n    $7d54ea0d6e840462$var$setCheckBoxes();\n}\nfunction $7d54ea0d6e840462$var$setCheckBoxes() {\n    // get list of custom checkboxes groups on the page\n    const groups = document.querySelectorAll(\".input_checkbox-group\");\n    // loop through each group\n    groups.forEach((group)=>{\n        // get all checkboxes in the group\n        const checkboxes = group.querySelectorAll(\"input[type='checkbox']\");\n        // identify the hidden text field inside each group\n        const hiddenInput = group.querySelector(\".input_checkbox-hidden\");\n        if (!checkboxes.length) return;\n        //when any checkbox on this group change, grab the values, transform the array into a string, and update the hidden field\n        function updateHiddenInput() {\n            const values = Array.from(checkboxes).filter((checkbox)=>checkbox.checked).map((checkbox)=>checkbox.value);\n            hiddenInput.value = values.join(\", \");\n        }\n        // loop through each checkbox\n        checkboxes.forEach((checkbox)=>{\n            // get checkbox label\n            const label = checkbox.nextElementSibling;\n            // set checkbox value to label text\n            checkbox.value = label.textContent;\n            // when checkbox change, update the hidden input\n            checkbox.addEventListener(\"change\", updateHiddenInput);\n        });\n    });\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    (0, $ce6a18b12420bce7$export$7fd17f34fe72f4b0)();\n    (0, $0cbe32f8563a9a71$export$3e5ce0c0ac78a8da)();\n    (0, $8dde7174b81b4982$export$1744cb1794fd120a)();\n    (0, $ee20a49b40292314$export$22ea07d0c2ddb570)();\n    (0, $1aa2e0393d0f1beb$export$1601281ad392a6d8)();\n    (0, $4013e65a83b1b778$export$9b05384e3b3cbff1)();\n    (0, $2739916fb78fd945$export$e125e88f659d8ab1)();\n    (0, $b140b9eb34f1ac44$export$4bc49541bd3cd0fc)();\n    (0, $7d54ea0d6e840462$export$d5bd5b80f649d6c)();\n});\n\n})();\n//# sourceMappingURL=globals.js.map\n","import { setLoadingStates } from \"./modules/setLoadingStates\";\nimport { initButtons } from \"./modules/buttons\";\nimport { initMenu } from \"./modules/menu\";\nimport { setStaggerText } from \"./modules/staggerText\";\nimport { setStaggerElements } from \"./modules/staggerElements\";\nimport { setPathAnimations } from \"./modules/SVGPathAnimation\";\nimport { initCheckSectionThemeScroll } from \"./modules/checkNavTheme\";\nimport { initFormSubmit } from \"./modules/formSubmit\";\nimport { initContactForm } from \"./modules/contactForm\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  setLoadingStates();\n  initCheckSectionThemeScroll();\n  initButtons();\n  initMenu();\n  setStaggerText();\n  setStaggerElements();\n  setPathAnimations();\n  initFormSubmit();\n  initContactForm();\n});\n","export function setLoadingStates() {\n  const loading = document.querySelector(\".loading\");\n  if (!loading) {\n    return;\n  }\n\n  const logo = loading.querySelector(\".loading_logo\");\n  const logoPath = loading.querySelector(\".loading_bg-svg path\");\n\n  gsap.set(logoPath, { drawSVG: \"100% live\" });\n  gsap.set(logo, { opacity: 1, y: \"0%\" });\n  gsap.set(loading, { clipPath: \"inset(0% 0% 0% 0%)\" });\n\n  gsap.to(logoPath, {\n    drawSVG: \"0% live\",\n    duration: 2,\n    delay: 0.5,\n    // ease: \"expo.out\",\n  });\n\n  gsap.to(logo, {\n    opacity: 0,\n    y: \"-50%\",\n    delay: 0.5,\n    duration: 1,\n    ease: \"expo.out\"\n  });\n\n  gsap.to(loading, {\n    clipPath: \"inset(0% 0% 100% 0%)\",\n    duration: 1,\n    delay: 1,\n    ease: \"expo.out\",\n    onComplete: () => {\n      loading.style.display = \"none\";\n      gsap.set(logo, { opacity: 0, y: \"50%\" });\n      gsap.set(loading, { clipPath: \"inset(100% 0% 0% 0%)\" });\n    }\n  });\n\n  // Loading animation\n  const links = document.querySelectorAll(\"a\");\n  links.forEach((l) => {\n    l.addEventListener(\"click\", (e) => {\n      // e.preventDefault();\n      const href = l.href;\n      const url = new URL(href);\n\n      if (\n        window.location.origin === url.origin &&\n        window.location.pathname !== url.pathname &&\n        l.target !== \"_blank\"\n      ) {\n        e.preventDefault();\n\n        loading.style.display = \"flex\";\n        gsap.to(logo, {\n          opacity: 1,\n          y: \"0%\",\n          duration: 1,\n          delay: 0.5,\n          ease: \"expo.out\",\n        });\n        gsap.to(logoPath, {\n          drawSVG: \"100% live\",\n          duration: 2,\n          delay: 0.5,\n          // ease: \"expo.out\",\n        });\n        gsap.to(loading, {\n          clipPath: \"inset(0% 0% 0% 0%)\",\n          duration: 1,\n          ease: \"expo.out\",\n          onComplete: () => {\n            window.location.href = href;\n          },\n        });\n\n        // setTimeout(() => {\n        //   window.location.href = href;\n        // }, 500);\n      }\n    });\n  });\n}\n","export function initButtons() {\n  // Register the Finsweet CMS load callback using the official API.\n  window.fsAttributes = window.fsAttributes || [];\n  window.fsAttributes.push([\n    \"cmsload\",\n    (listInstances) => {\n      console.log(\"cmsload Successfully loaded!\");\n      // Loop through all CMSList instances on the page.\n      listInstances.forEach((listInstance) => {\n        // Listen for the 'renderitems' event.\n        listInstance.on(\"renderitems\", (renderedItems) => {\n          setButtons();\n        });\n      });\n    },\n  ]);\n\n  // Run the initial setup for buttons.\n  setButtons();\n}\n\nfunction setButtons() {\n  // Only select buttons that haven’t been initialized yet.\n  const buttons = document.querySelectorAll(\".button:not([data-initialized])\");\n\n  if (!buttons.length) {\n    console.error(\"No new buttons found.\");\n    return;\n  }\n\n  // Initialize each new button.\n  buttons.forEach((button) => {\n    button.setAttribute(\"data-initialized\", \"true\");\n    setButton(button);\n  });\n}\n\nfunction setButton(button) {\n  // Split the button text into spans for lines and words using SplitType.\n  const buttonEls = new SplitType(button.querySelector(\".button_label\"), {\n    types: \"lines, words\",\n    tagName: \"span\",\n  });\n\n  const bg = button.querySelector(\".button_bg\");\n  const icon = button.querySelectorAll(\".button_icon-el\");\n\n  // Stagger words on mouse enter.\n  button.addEventListener(\"mouseenter\", () => {\n    gsap.to(buttonEls.words, {\n      yPercent: -100,\n      stagger: 0.01,\n      duration: 0.5,\n      ease: \"expo.out\",\n    });\n    gsap.to(bg, {\n      scaleX: 1,\n      duration: 0.5,\n      ease: \"expo.out\",\n    });\n\n    if (icon[0].classList.contains(\"move-horizontal\")) {\n      gsap.to(icon, {\n        xPercent: 100,\n        duration: 0.5,\n        ease: \"expo.out\",\n      });\n    } else if (icon[0].classList.contains(\"move-vertical\")) {\n      gsap.to(icon, {\n        yPercent: 100,\n        duration: 0.5,\n        ease: \"expo.out\",\n      });\n    }\n  });\n\n  // Revert animations on mouse leave.\n  button.addEventListener(\"mouseleave\", () => {\n    gsap.to(buttonEls.words, {\n      yPercent: 0,\n      stagger: 0.02,\n      duration: 0.5,\n      ease: \"expo.out\",\n    });\n    gsap.to(bg, {\n      scaleX: 0,\n      duration: 0.3,\n      ease: \"expo.out\",\n    });\n\n    if (icon[0].classList.contains(\"move-horizontal\")) {\n      gsap.to(icon, {\n        xPercent: 0,\n        duration: 0.3,\n        ease: \"expo.out\",\n      });\n    } else if (icon[0].classList.contains(\"move-vertical\")) {\n      gsap.to(icon, {\n        yPercent: 0,\n        duration: 0.3,\n        ease: \"expo.out\",\n      });\n    }\n  });\n}\n","export function initMenu() {\n  const menu = document.querySelector(\".navbar_component\");\n\n  if (!menu) {\n    console.error(\"No menu found.\");\n    return;\n  }\n  // use gsap.matchMedia to check if the screen is table or mobile.\n  // If it is, add extra logic to open the mobile menu on click and also the dropdowns on click.\n  // If it is not, use the mouseenter and mouseleave events to show and hide the dropdowns.\n  const mm = gsap.matchMedia();\n  mm.add({\n    isMobile: \"(max-width: 991px)\",\n    isDesktop: \"(min-width: 992px)\",\n  },\n    (context) => { \n      const menuItems = menu.querySelectorAll(\".navbar_link\");\n      menuItems.forEach((item) => setMenuItem(item, context.conditions.isMobile));\n    \n      const dropdowns = menu.querySelectorAll(\".navbar_dropdown-trigger\");\n    \n      if (!dropdowns) {\n        console.error(\"No dropdowns found.\");\n        return;\n      }\n\n      if (context.conditions.isMobile) {\n        const menuTrigger = menu.querySelector(\".navbar_link.is-mobile-trigger\");\n        const menuDropdown = menu.querySelector(\".navbar_menu\");\n        const contentWrapper = document.querySelector(\".main-wrapper\");\n        const footer = document.querySelector(\".footer\");\n\n        gsap.set(menuDropdown, { height: 0 });\n\n        menuTrigger.addEventListener(\"click\", () => {\n          menuDropdown.classList.toggle(\"is-active\");\n\n          if (menuDropdown.classList.contains(\"is-active\")) {\n            gsap.to(menuDropdown, {\n              height: \"auto\",\n              duration: 0.5,\n              ease: \"expo.out\",\n            });\n            gsap.to(\n              menuTrigger.querySelectorAll(\".navbar_link-icon-svg\"),\n              {\n                rotate: 180,\n                duration: 0.5,\n                ease: \"expo.out\",\n              });\n            gsap.to(contentWrapper, {\n              filter: \"blur(15px)\",\n              duration: 0.5,\n              ease: \"expo.out\",\n            });\n            gsap.to(footer, {\n              filter: \"blur(15px)\",\n              duration: 0.5,\n              ease: \"expo.out\",\n            });\n          }\n          else {\n            gsap.to(menuDropdown, {\n              height: 0,\n              duration: 0.5,\n              ease: \"expo.out\",\n            });\n            gsap.to(\n              menuTrigger.querySelectorAll(\".navbar_link-icon-svg\"),\n              {\n                rotate: 0,\n                duration: 0.5,\n                ease: \"expo.out\",\n              });\n            gsap.to(contentWrapper, {\n              filter: \"blur(0px)\",\n              duration: 0.5,\n              ease: \"expo.out\",\n            });\n            gsap.to(footer, {\n              filter: \"blur(0px)\",\n              duration: 0.5,\n              ease: \"expo.out\",\n            });\n          }\n        });\n      }\n    \n      dropdowns.forEach((dropdown) => {\n        setDropdown(dropdown, context.conditions.isMobile);\n      });\n    });\n  \n\n}\n\nfunction setMenuItem(item) {\n  const itemEls = new SplitType(item.querySelector(\".navbar_link-label\"), {\n    types: \"lines, words\",\n    tagName: \"span\",\n  });\n\n  item.addEventListener(\"mouseenter\", () => {\n    gsap.to(itemEls.words, {\n      yPercent: -100,\n      stagger: 0.05,\n      duration: 0.5,\n      ease: \"expo.out\",\n    });\n  });\n\n  item.addEventListener(\"mouseleave\", () => {\n    gsap.to(itemEls.words, {\n      yPercent: 0,\n      stagger: 0.05,\n      duration: 0.5,\n      ease: \"expo.out\",\n    });\n  });\n}\n\nfunction setDropdown(dropdown, isMobile) {\n  // add mouse hover logic to show / hide dropdown based on .navbar_dropdown height\n  const dropdownMenu = dropdown.querySelector(\".navbar_dropdown\");\n  const dropdownLinks = dropdownMenu.querySelectorAll(\".dropdown_item\");\n\n  gsap.set(dropdownLinks, { yPercent: 50, opacity: 0 });\n\n  const tl = gsap.timeline();\n\n  const openDropdown = () => {\n    tl.clear();\n    tl.set(dropdownMenu, { height: \"0\" });\n    tl.set(dropdownLinks, { yPercent: 50, opacity: 0 });\n    tl.to(dropdownMenu, {\n      height: \"auto\",\n      duration: 0.5,\n      ease: \"expo.out\",\n    });\n    tl.to(\n      dropdown.querySelectorAll(\".navbar_link-icon-svg\"),\n      {\n        rotate: 180,\n        duration: 0.5,\n        ease: \"expo.out\",\n      },\n      0\n    );\n\n    tl.to(dropdownLinks, {\n      yPercent: 0,\n      opacity: 1,\n      stagger: 0.01,\n      duration: 0.5,\n      ease: \"expo.out\",\n    }, 0.25);\n  };\n\n  const closeDropdown = () => {\n    tl.clear();\n    tl.to(dropdownMenu, {\n      height: 0,\n      duration: 0.5,\n      ease: \"expo.out\",\n    });\n\n    tl.to(dropdownLinks, {\n      yPercent: 50,\n      opacity: 0,\n      duration: 0.3,\n      ease: \"expo.out\",\n    }, 0);\n\n    tl.to(\n      dropdown.querySelectorAll(\".navbar_link-icon-svg\"),\n      {\n        rotate: 0,\n        duration: 0.5,\n        ease: \"expo.out\",\n      },\n      0\n    );\n  }\n  \n  if (isMobile) {\n    dropdown.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      if (dropdown.classList.contains(\"active\")) {\n        closeDropdown();\n        dropdown.classList.remove(\"active\");\n      }\n      else {\n        openDropdown();\n        dropdown.classList.add(\"active\");\n      }\n    });\n  } else {\n    dropdown.addEventListener(\"mouseenter\", () => {\n      openDropdown();\n    });\n\n    dropdown.addEventListener(\"mouseleave\", () => {\n      closeDropdown();\n    });\n  }\n}","import { setLinesWrapper } from \"./setLinesWrapper\";\n\n// Link timelines to scroll position\nfunction createScrollTrigger(triggerElement, elements, start, end, stagger, delay, withScroll) {\n  const trigger = {\n    trigger: triggerElement,\n    scrub: true,\n    start,\n    fastScrollEnd: 500,\n    preventOverlaps: \"scroll-text\",\n  };\n\n  if (!withScroll) {\n    trigger.onEnter = () => {\n      gsap.to(elements, {\n        y: 0,\n        opacity: 1,\n        stagger: stagger,\n        duration: 1.5,\n        ease: \"power4.out\",\n        delay: Number(delay),\n      });\n    };\n\n    gsap.timeline({ scrollTrigger: trigger });\n  } else {\n    trigger.end = end;\n    gsap\n      .timeline({\n        scrollTrigger: trigger,\n      })\n      .to(words, {\n        y: 0,\n        opacity: 1.5,\n        stagger: stagger,\n        duration: 1,\n        ease: \"none\",\n      });\n  }\n}\n\nexport function setStaggerText() {\n  // Split all words on the brand core section\n  const textEls = document.querySelectorAll('[stagger-text]');\n\n  textEls.forEach((el) => {\n    const type = el.getAttribute(\"stagger-text\");\n    let staggerTextEls;\n\n    if (el.classList.contains('w-richtext')) {\n      staggerTextEls = new SplitType(el.querySelectorAll(\"p, li, h2, h3\"), {\n        types: type === \"words\" ? \"words\" : \"lines\",\n        tagName: \"span\",\n      });\n\n    } else {\n      staggerTextEls = new SplitType(el, {\n        types: type === \"words\" ? \"words\" : \"lines\",\n        tagName: \"span\",\n      });\n    }\n\n    if (type !== \"words\") {\n      setLinesWrapper(staggerTextEls.lines);\n    }\n\n    gsap.set(type === \"words\" ? staggerTextEls.words : staggerTextEls.lines,  { y: \"1em\", opacity: 0 });\n\n    el.classList.add(\"init\");\n\n      const words =\n        type === \"words\"\n          ? el.querySelectorAll(\".word\")\n          : el.querySelectorAll(\".line\"),\n      startVal = el.dataset.startPos || \"bottom bottom\",\n      endVal = el.dataset.endPos || \"bottom center\",\n      stagger = el.dataset.stagger || 0.05,\n      delay = el.dataset.delay || 0,\n      withScrollTrigger = el.dataset.withScroll || false;\n\n    createScrollTrigger(\n      el,\n      words,\n      startVal,\n      endVal,\n      stagger,\n      delay,\n      withScrollTrigger\n    );\n\n  });\n}\n","export function setLinesWrapper(lines, callback) {\n  // Wrap each line in a .line-wrapper span\n  lines.forEach(line => {\n    // add a space right after the last word to prevent the line from collapsing\n    const innerHTML = line.innerHTML;\n    // add space after the last word\n    const newInnerHTML = innerHTML.replace(/(\\w+)(\\s*)$/, '$1 $2');\n    line.innerHTML = newInnerHTML;\n  });\n\n  if (typeof callback === 'function') {\n    callback();\n  }\n}","// Link timelines to scroll position\nfunction createScrollList(\n  triggerElement,\n  elements,\n  start,\n  stagger,\n  delay,\n) {\n  gsap.set(elements, {\n    yPercent: 100,\n    opacity: 0,\n  })\n\n  gsap.timeline({\n    scrollTrigger: {\n      trigger: triggerElement,\n      scrub: true,\n      start,\n      onEnter: () => {\n        gsap.to(elements, {\n          yPercent: 0,\n          opacity: 1,\n          stagger,\n          ease: \"power4.out\",\n          delay: Number(delay),\n        });\n      },\n    },\n  });\n}\n\nexport function setStaggerElements() {\n  const list = document.querySelectorAll(\"[stagger-list]\");\n\n  if (!list) {\n    return;\n  }\n\n  list.forEach((el) => {\n    const elements = el.querySelectorAll(\"[stagger-el]\"),\n      startVal = el.dataset.startPos || \"top bottom\",\n      stagger = el.dataset.stagger || 0.05,\n      delay = el.dataset.delay || 0;\n    \n    if (!elements) {\n      return;\n    }\n    \n    createScrollList(el, elements, startVal, stagger, delay);\n  });\n}\n","export function setPathAnimations() {\n  const paths = document.querySelectorAll(\"[path-reveal]\");\n\n  if (!paths) {\n    console.error(\"No paths found.\");\n    return;\n  }\n\n  paths.forEach((path) => {\n    setPathAnimation(path);\n  });\n}\n\nfunction setPathAnimation(path) {\n  // use GSAP drawSVG plugin to animate path drawing  \n  const pathEls = path.querySelectorAll(\"path\");\n  const duration = path.dataset.duration ? parseFloat(path.dataset.duration) : 3;\n\n  gsap.set(pathEls, { drawSVG: \"0%\" });\n\n\n  // Set ScrollTrigger to trigger animation when path is in view\n  ScrollTrigger.create({\n    trigger: path,\n    start: \"top center\",\n    onEnter: () => {\n      gsap.to(pathEls, {\n        drawSVG: \"100%\",\n        duration: duration,\n        ease: \"expo.out\",\n      });\n    },\n  });\n}","export function initCheckSectionThemeScroll() {\n  // Get detection offset, in this case the navbar\n  const navBarHeight = document.querySelector(\"[data-nav-bar-height]\");\n  const themeObserverOffset = navBarHeight ? navBarHeight.offsetHeight / 2 : 0;\n\n  function checkThemeSection() {\n    const themeSections = document.querySelectorAll(\"[data-theme-section]\");\n\n    themeSections.forEach(function (themeSection) {\n      const rect = themeSection.getBoundingClientRect();\n      const themeSectionTop = rect.top;\n      const themeSectionBottom = rect.bottom;\n\n      // If the offset is between the top & bottom of the current section\n      if (\n        themeSectionTop <= themeObserverOffset &&\n        themeSectionBottom >= themeObserverOffset\n      ) {\n        // Check [data-theme-section]\n        const themeSectionActive =\n          themeSection.getAttribute(\"data-theme-section\");\n        document.querySelectorAll(\"[data-theme-nav]\").forEach(function (elem) {\n          if (elem.getAttribute(\"data-theme-nav\") !== themeSectionActive) {\n            elem.setAttribute(\"data-theme-nav\", themeSectionActive);\n          }\n        });\n\n        // Check [data-bg-section]\n        const bgSectionActive = themeSection.getAttribute(\"data-bg-section\");\n        document.querySelectorAll(\"[data-bg-nav]\").forEach(function (elem) {\n          if (elem.getAttribute(\"data-bg-nav\") !== bgSectionActive) {\n            elem.setAttribute(\"data-bg-nav\", bgSectionActive);\n          }\n        });\n      }\n    });\n  }\n\n  function startThemeCheck() {\n    document.addEventListener(\"scroll\", checkThemeSection);\n  }\n\n  // Initial check and start listening for scroll\n  checkThemeSection();\n  startThemeCheck();\n}\n","export function initFormSubmit() {\n  const forms = document.querySelectorAll(\"form\");\n\n  if (!forms) {\n    return;\n  }\n\n  forms.forEach((form) => {\n    const formSubmitButton = form.querySelector(\".button.is-submit\");\n    const submitButton = form.querySelector(\".form_submit\");\n    const label = form.querySelector(\".button_label\");\n\n    if (!formSubmitButton || !submitButton) {\n      return;\n    }\n  \n    // add event listener to the form submit button\n    formSubmitButton.addEventListener(\"click\", function (e) {\n      e.preventDefault(); // prevent the default action\n      // check if the form is valid\n      if (form.checkValidity()) {\n        // if valid, submit the form and change the button text\n        submitButton.click();\n        \n        label.textContent = submitButton.getAttribute(\"data-wait\");\n      } else {\n        // if not valid, report validity (this will show the HTML5 validation messages)\n        form.reportValidity();\n      }\n    });\n\n    // form.addEventListener(\"submit\", function () {\n    //   // scroll screen back to the top of the using Lenis.js scrollTo method\n    //   const formTop = form.getBoundingClientRect().top;\n    //   lenis.scrollTo(formTop, 500);\n    // });\n  });\n\n}","export function initContactForm() {\n  const wrapper = document.querySelector(\".contact-modal\");\n  // const form = wrapper.querySelector(\"form\");\n\n  if (!wrapper) {\n    return;\n  }\n\n  const backdrop = wrapper.querySelector(\".contact-modal_backdrop\");\n  const body = wrapper.querySelector(\".contact-modal_body\");\n  const closeButton = wrapper.querySelector(\".contact-modal_close\");\n\n  gsap.set(wrapper, { display: \"none\" });\n  gsap.set(backdrop, { autoAlpha: 0 });\n  gsap.set(body, { clipPath: \"inset(50%)\" });\n  gsap.set(closeButton, { scale: 0 });\n\n  const tl = gsap.timeline({ paused: true });\n\n  tl.set(wrapper, { display: \"flex\" });\n  tl.to(backdrop, { autoAlpha: 1, duration: 0.5, ease: \"expo.inOut\" });\n  tl.to(body, { clipPath: \"inset(0%)\", duration: 1, ease: \"expo.inOut\" }, 0.25);\n  tl.to(closeButton, { scale: 1, duration: 0.5, ease: \"expo.inOut\" }, 1);\n\n  const openButton = document.querySelectorAll(\"[data-contact-trigger]\");\n\n  openButton.forEach((button) => {\n    button.addEventListener(\"click\", () => {\n      wrapper.classList.add(\"is-active\");\n      // document.body.classList.add(\"no-scrollbar\");\n      lenis.stop();\n      tl.play();\n    });\n  });\n\n  closeButton.addEventListener(\"click\", () => {\n    wrapper.classList.remove(\"is-active\");\n    // document.body.classList.remove(\"no-scrollbar\");\n    lenis.start();\n    tl.reverse();\n  });\n\n  setCheckBoxes();\n}\n\nfunction setCheckBoxes() {\n  // get list of custom checkboxes groups on the page\n  const groups = document.querySelectorAll(\".input_checkbox-group\");\n\n  // loop through each group\n  groups.forEach((group) => {\n    // get all checkboxes in the group\n    const checkboxes = group.querySelectorAll(\"input[type='checkbox']\");\n    // identify the hidden text field inside each group\n    const hiddenInput = group.querySelector(\".input_checkbox-hidden\");\n\n    if (!checkboxes.length) {\n      return;\n    }\n\n    //when any checkbox on this group change, grab the values, transform the array into a string, and update the hidden field\n    function updateHiddenInput() {\n      const values = Array.from(checkboxes)\n        .filter((checkbox) => checkbox.checked)\n        .map((checkbox) => checkbox.value);\n\n      hiddenInput.value = values.join(\", \");\n    }\n\n    // loop through each checkbox\n    checkboxes.forEach((checkbox) => {\n      // get checkbox label\n      const label = checkbox.nextElementSibling;\n\n      // set checkbox value to label text\n      checkbox.value = label.textContent;\n\n      // when checkbox change, update the hidden input\n      checkbox.addEventListener(\"change\", updateHiddenInput);\n    });\n  });\n}"],"names":["$8dde7174b81b4982$var$setButtons","buttons","document","querySelectorAll","length","console","error","forEach","button","setAttribute","$8dde7174b81b4982$var$setButton","buttonEls","SplitType","querySelector","types","tagName","bg","icon","addEventListener","gsap","to","words","yPercent","stagger","duration","ease","scaleX","classList","contains","xPercent","loading","logo","logoPath","set","drawSVG","opacity","y","clipPath","delay","onComplete","style","display","links","l","e","href","url","URL","window","location","origin","pathname","target","preventDefault","navBarHeight","themeObserverOffset","offsetHeight","checkThemeSection","themeSections","themeSection","rect","getBoundingClientRect","themeSectionTop","top","themeSectionBottom","bottom","themeSectionActive","getAttribute","elem","bgSectionActive","fsAttributes","push","listInstances","log","listInstance","on","renderedItems","menu","mm","matchMedia","add","isMobile","isDesktop","context","menuItems","item","$ee20a49b40292314$var$setMenuItem","itemEls","conditions","dropdowns","menuTrigger","menuDropdown","contentWrapper","footer","height","toggle","rotate","filter","dropdown","$ee20a49b40292314$var$setDropdown","dropdownMenu","dropdownLinks","tl","timeline","openDropdown","clear","closeDropdown","remove","textEls","el","staggerTextEls","type","lines","line","newInnerHTML","innerHTML","replace","words1","startVal","dataset","startPos","endVal","endPos","withScrollTrigger","withScroll","$1aa2e0393d0f1beb$var$createScrollTrigger","triggerElement","elements","start","end","trigger","scrub","fastScrollEnd","preventOverlaps","scrollTrigger","onEnter","Number","list","paths","path","$2739916fb78fd945$var$setPathAnimation","pathEls","parseFloat","ScrollTrigger","create","forms","form","formSubmitButton","submitButton","label","checkValidity","click","textContent","reportValidity","wrapper","backdrop","body","closeButton","autoAlpha","scale","paused","openButton","lenis","stop","play","reverse","groups","group","checkboxes","hiddenInput","updateHiddenInput","values","Array","from","checkbox","checked","map","value","join","nextElementSibling"],"version":3,"file":"globals.js.map"}